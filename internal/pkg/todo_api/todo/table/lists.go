//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Lists = newListsTable("todo", "lists", "")

type listsTable struct {
	postgres.Table

	// Columns
	ListID      postgres.ColumnInteger
	UserID      postgres.ColumnString
	Title       postgres.ColumnString
	Description postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ListsTable struct {
	listsTable

	EXCLUDED listsTable
}

// AS creates new ListsTable with assigned alias
func (a ListsTable) AS(alias string) *ListsTable {
	return newListsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ListsTable with assigned schema name
func (a ListsTable) FromSchema(schemaName string) *ListsTable {
	return newListsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ListsTable with assigned table prefix
func (a ListsTable) WithPrefix(prefix string) *ListsTable {
	return newListsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ListsTable with assigned table suffix
func (a ListsTable) WithSuffix(suffix string) *ListsTable {
	return newListsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newListsTable(schemaName, tableName, alias string) *ListsTable {
	return &ListsTable{
		listsTable: newListsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newListsTableImpl("", "excluded", ""),
	}
}

func newListsTableImpl(schemaName, tableName, alias string) listsTable {
	var (
		ListIDColumn      = postgres.IntegerColumn("list_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		allColumns        = postgres.ColumnList{ListIDColumn, UserIDColumn, TitleColumn, DescriptionColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, TitleColumn, DescriptionColumn}
	)

	return listsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ListID:      ListIDColumn,
		UserID:      UserIDColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
